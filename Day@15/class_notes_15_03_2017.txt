Creating the Custom Service by using service()

Ex.

	app.service("my_service",my_service);

	function my_service(){

		this.my_fun = function(){
			return "I am from Service";
		}
	}


[Note. service() depending on "user defined function" to provide 

      services to the controllers ]


ctrl_one.js
-
$scope.var_one = my_service.my_fun();


ctrl_two.js
-
$scope.var_two = my_service.my_fun();


Creating the Custom Service  by using value()
-
	We Can Create the Custom Services in the form of a "key&value" pairs  by using value().

app.value("my_service","First Value");
app.value("my_service","Second value");

	O/P.
		Second Value

		Second Value

Note. value() returns the latest value.


Creating the Custom Service by using constant()
-
	We can Create the Custom Services in the form of a "key&value" pairs by using constant().

Ex.
	app.constant("my_service","First Value");
	app.constant("my_service","Second Value");

O/P.

	First Value

	First value


Predefined Services.

	The Services Provided by framework called as Predefined Services.


1.$http

2.$q

3.$timeout

4.$interval

5.$location


$http.

	used to connect to the servers by using http protocol.


var deffered_one = $q.defer();

var deffered_two = $q.defer();

var deffered_three = $q.defer();



this.fun_one = function(){

	return $http.get("w3scools")
		.then(
	
	function(response){
		deffered_one.resolve(response);
		return deffered_one.promise;
	},function(response){
		deffered_one.reject(response);
		return deffered_one.promise
	});
}

this.fun_two = function(){

	return $http.get("demosoft")
		.then(
	
	function(response){
		deffered_two.resolve(response);
		return deffered_two.promise;
	},function(response){
		deffered_two.reject(response);
		return deffered_two.promise
	});
}

this.fun_three = function(){

	return $http.get("thinkster")
		.then(
	
	function(response){
		deffered_three.resolve(response);
		return deffered_three.promise;
	},function(response){
		deffered_three.reject(response);
		return deffered_three.promise
	});
}











	



























